#!/usr/bin/python
# -*- coding: utf-8 -*-

from datetime import datetime

tmpl = """/// %s
#include "IntR.h"
#define Power(x,y) pow(x,y)
#define Pi M_PI

#define initIntR cdbl u1 = s4 - sp - t1;\\
cdbl s = sp + q2;\\
cdbl r1 = sqrt(pow(s - s4,2) - 4.*m2*s);\\
cdbl r2 = sqrt(pow(sp + u1 - q2,2) - 4.*q2*(t1 + m2));\\
cdbl r3 = sqrt((q2*(sp + t1) - sp*u1)*(-4*m2*(sp + t1) + q2*(sp + t1) - sp*u1));\\
cdbl r4 = sqrt(t1*(Power(s,2)*t1 + 4*m2*(-(q2*t1) + sp*(sp + u1))));\\
cdbl r5 = sqrt(Power(s4*sp - q2*(sp + t1),2) + 4*m2*(sp + t1)*(-(q2*(sp + t1)) + sp*(sp + u1)));\\
cdbl psLog1_S1_u6 = log((m2 + s4)/m2);\\
cdbl psLog3_S1_s3 = log1p(- (2*r1)/(2*m2 - q2 + r1 + t1 + u1));\\
cdbl psLog3_S1_u7 = log1p(- (2*r2*s4)/(2*m2*(sp + u1) + s4*(-q2 + r2 + sp + u1)));\\
cdbl psLog4_S1_u6_s3 = log1p(- (2*r3)/(r3 - 2*m2*(sp + t1) + q2*(sp + t1) - sp*u1));\\
cdbl psLog4_S1_u6_u7 = log1p(- (2*r5*s4)/(s4*(r5 - s4*sp + q2*(sp + t1)) - 2*m2*(sp + t1)*(sp + u1)));\\
cdbl psLog4_S2_u7_s3 = log1p(- (2*r4)/(r4 - s*t1 - 2*m2*(sp + u1)));
#define initIntROK \\
cdbl psLog2_S1_s3 = log(((m2 + s4)*Power(t1,2))/(m2*Power(sp + t1,2)));\\
cdbl psLog2_S1_u7 = log(((m2 + s4)*Power(t1,2)*Power(u1,2))/(Power(sp + t1,2)*(q2*s4*t1 + m2*Power(sp + u1,2))));
#define initIntRfact cdbl factLog = log(s4*s4/(m2*(s4+m2)));
"""%("auto-generated by build.py on {0:%Y}/{0:%m}/{0:%d} {0:%H}:{0:%M}:{0:%S}".format(datetime.now()));
ls = [];
for proj in ["F2_VV", "F2_AA", "FL_VV","FL_AA","x2g1_VV","x2g1_AA","xF3_VA","g4_VA","gL_VA"]:
  for col in ["OK", "QED"]:
    l = "IntR%s_%s"%(col,proj)
    ls.append(l)
    tmpl +="""
cdbl Inclusive::ME::%s(cdbl m2, cdbl q2, cdbl sp, cdbl t1, cdbl s4) {{
initIntR
%s
%s
return {%s};
}}
"""%(l,
"" if "QED" == col else "initIntROK",
"" if "QED" == col or "gL_VA" == proj else "initIntRfact",
l);

fs={};
for l in ls:
	with open(l+".c","r") as f:
		fs[l] = f.read().replace("\\[LetterSpace]","_")
		f.close()

with open("../../src/Inclusive/ME/IntR.cpp", "w") as f:
	f.write(tmpl.format(**fs))
	f.close()
