#!/usr/bin/python
# -*- coding: utf-8 -*-

from datetime import datetime

tmpl = """/// %s
#include "SV.h"

#define Power(x,y) pow(x,y)
#include <gsl/gsl_sf_dilog.h>
#define ln(z) log(z)
#define Li2(z) gsl_sf_dilog(z)
#define zeta2 1.64493406684823 // pi^2/6
#define Pi M_PI

#define initSV cdbl u1 = -sp-t1;\\
cdbl s = sp+q2;\\
cdbl rt1 = sqrt(pow(t1-q2,2) - 4.*m2*q2);\\
cdbl ru1 = sqrt(pow(u1-q2,2) - 4.*m2*q2);\\
cdbl beta = sqrt(1.-4.*m2/s);\\
cdbl chi = (1.-beta)/(1.+beta);\\
cdbl betaq = sqrt(1.-4*m2/q2);\\
cdbl chiq = (betaq-1.)/(betaq+1.);\\
dbl r = 0.;
"""%("auto-generated by build.py on {0:%Y}/{0:%m}/{0:%d} {0:%H}:{0:%M}:{0:%S}".format(datetime.now()));
ls = [];
for proj in ["F2_VV", "F2_AA", "FL_VV","FL_AA","x2g1_VV","x2g1_AA","xF3_VA","g4_VA","gL_VA"]:
  for col in ["OK","QED"]:
    l = "SV%s_%s"%(col,proj)
    ls.append(l)
    tmpl +="""
cdbl Inclusive::ME::%s(cdbl m2, cdbl q2, cdbl sp, cdbl t1) {{
initSV
{%s}
return r;
}}
"""%(l,l);

fs={};
for l in ls:
	with open(l+".c","r") as f:
		fs[l] = f.read().replace("\\[LetterSpace]","_")
		f.close()

with open("../../src/Inclusive/ME/SV.cpp", "w") as f:
	f.write(tmpl.format(**fs))
	f.close()
